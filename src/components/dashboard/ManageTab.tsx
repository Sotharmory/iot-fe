import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Key, CreditCard, Copy, Trash2, Plus, Settings, Clock, Hash } from 'lucide-react';

type Code = { code: string; type: string; expires_at: string };
type Card = { id: string; enrolled_at: string };

interface ManageTabProps {
  // Code management
  code: string;
  setCode: (code: string) => void;
  ttl: number;
  setTtl: (ttl: number) => void;
  type: string;
  setType: (type: string) => void;
  codes: Code[];
  isLoading: boolean;
  onCreateCode: () => void;
  onDeleteCode: (code?: string) => void;
  onCopyCode: (code: string) => void;
  
  // NFC management
  nfcId: string;
  setNfcId: (id: string) => void;
  cards: Card[];
  onEnroll: () => void;
  onDisenroll: (id?: string) => void;
  onCopyCardId: (id: string) => void;
  onDeleteAllCodes: () => void;
  onDeleteAllCards: () => void;
}

export function ManageTab({
  code, setCode, ttl, setTtl, type, setType, codes, isLoading,
  onCreateCode, onDeleteCode, onCopyCode,
  nfcId, setNfcId, cards, onEnroll, onDisenroll, onCopyCardId,
  onDeleteAllCodes, onDeleteAllCards
}: ManageTabProps) {

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleString('vi-VN');
  };

  const isExpired = (expiresAt: string) => {
    return new Date(expiresAt) < new Date();
  };

  return (
    <div className="space-y-8">
      {/* Code Management Section */}
      <Card className="shadow-xl border-0 bg-gradient-to-br from-green-50 to-emerald-50">
        <CardHeader className="text-center">
          <div className="mx-auto w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mb-4">
            <Key className="w-6 h-6 text-white" />
          </div>
          <CardTitle className="text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
            Qu·∫£n L√Ω M√£ Truy C·∫≠p
          </CardTitle>
          <CardDescription>
            T·∫°o v√† qu·∫£n l√Ω m√£ PIN cho h·ªá th·ªëng
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="code-input" className="text-sm font-semibold flex items-center gap-2">
                <Hash className="w-4 h-4" />
                M√£ PIN 6 Ch·ªØ S·ªë
              </Label>
              <Input
                id="code-input"
                type="text"
                placeholder="123456"
                value={code}
                onChange={(e) => setCode(e.target.value.slice(0, 6))}
                className="text-center font-mono text-lg h-12"
                maxLength={6}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="ttl-input" className="text-sm font-semibold flex items-center gap-2">
                <Clock className="w-4 h-4" />
                Th·ªùi Gian (gi√¢y)
              </Label>
              <Input
                id="ttl-input"
                type="number"
                value={ttl}
                onChange={(e) => setTtl(Number(e.target.value))}
                className="h-12"
                min="60"
                max="86400"
              />
            </div>
            
            <div className="space-y-2">
              <Label className="text-sm font-semibold flex items-center gap-2">
                <Settings className="w-4 h-4" />
                Lo·∫°i M√£
              </Label>
              <Select value={type} onValueChange={setType}>
                <SelectTrigger className="h-12">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="otp">üîÑ OTP (M·ªôt l·∫ßn)</SelectItem>
                  <SelectItem value="static">üîí Static (Vƒ©nh vi·ªÖn)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex gap-4">
            <Button 
              onClick={onCreateCode}
              disabled={isLoading || !code || code.length !== 6}
              className="flex-1 h-12 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 font-semibold"
            >
              {isLoading ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full" />
                  ƒêang T·∫°o...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Plus className="w-4 h-4" />
                  T·∫°o M√£ M·ªõi
                </div>
              )}
            </Button>
            
            <Button 
              onClick={() => onDeleteCode()}
              disabled={isLoading || !code}
              variant="destructive"
              className="flex-1 h-12 font-semibold"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              X√≥a M√£
            </Button>
          </div>

          <div className="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
            <div className="space-y-2">
              <Badge variant="outline" className="bg-blue-100 text-blue-700 border-blue-300 mb-2">
                üí° H∆∞·ªõng D·∫´n
              </Badge>
              <p className="text-sm text-blue-800 font-medium">
                <strong>OTP:</strong> T·ª± ƒë·ªông h·∫øt h·∫°n sau th·ªùi gian ƒë√£ ƒë·∫∑t v√† ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c m·ªôt l·∫ßn.
              </p>
              <p className="text-sm text-blue-800 font-medium">
                <strong>Static:</strong> T·ªìn t·∫°i vƒ©nh vi·ªÖn cho ƒë·∫øn khi b·∫°n x√≥a th·ªß c√¥ng.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* NFC Management Section */}
      <Card className="shadow-xl border-0 bg-gradient-to-br from-purple-50 to-pink-50">
        <CardHeader className="text-center">
          <div className="mx-auto w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center mb-4">
            <CreditCard className="w-6 h-6 text-white" />
          </div>
          <CardTitle className="text-xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            Qu·∫£n L√Ω Th·∫ª NFC
          </CardTitle>
          <CardDescription>
            ƒêƒÉng k√Ω v√† qu·∫£n l√Ω th·∫ª NFC cho h·ªá th·ªëng
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="nfc-input" className="text-sm font-semibold flex items-center gap-2">
              <CreditCard className="w-4 h-4" />
              ID Th·∫ª NFC (T√πy Ch·ªçn)
            </Label>
            <Input
              id="nfc-input"
              type="text"
              placeholder="ƒê·ªÉ tr·ªëng ƒë·ªÉ k√≠ch ho·∫°t ESP32 qu√©t th·∫ª t·ª± ƒë·ªông"
              value={nfcId}
              onChange={(e) => setNfcId(e.target.value)}
              className="h-12"
            />
            <p className="text-sm text-gray-600 flex items-center gap-2">
              <Badge variant="outline" className="text-xs">üí°</Badge>
              B·ªè tr·ªëng ID ƒë·ªÉ ESP32 t·ª± ƒë·ªông ƒë·ªçc th·∫ª khi b·∫°n nh·∫•n "ƒêƒÉng K√Ω Th·∫ª"
            </p>
          </div>

          <div className="flex gap-4">
            <Button 
              onClick={onEnroll}
              disabled={isLoading}
              className="flex-1 h-12 bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 font-semibold"
            >
              <Plus className="w-4 h-4 mr-2" />
              ƒêƒÉng K√Ω Th·∫ª NFC
            </Button>
            
            <Button 
              onClick={() => onDisenroll()}
              disabled={isLoading || !nfcId}
              variant="destructive"
              className="flex-1 h-12 font-semibold"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              H·ªßy ƒêƒÉng K√Ω
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Active Items Display */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Active Codes */}
        <Card className="shadow-xl border-0">
          <CardHeader>
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-3">
                <Key className="w-6 h-6 text-green-600" />
                <div>
                  <CardTitle className="text-lg">M√£ ƒêang Ho·∫°t ƒê·ªông</CardTitle>
                  <CardDescription>T·ªïng c·ªông: {codes.length} m√£</CardDescription>
                </div>
              </div>
              {codes.length > 0 && (
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button variant="destructive" size="sm">
                      <Trash2 className="w-4 h-4 mr-1" />
                      X√≥a T·∫•t C·∫£
                    </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>X√°c nh·∫≠n x√≥a t·∫•t c·∫£ m√£</AlertDialogTitle>
                      <AlertDialogDescription>
                        B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ {codes.length} m√£ ƒëang ho·∫°t ƒë·ªông? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                      <AlertDialogAction onClick={onDeleteAllCodes} className="bg-red-600 hover:bg-red-700">
                        X√≥a T·∫•t C·∫£
                      </AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              )}
            </div>
          </CardHeader>
          <CardContent>
            {codes.length > 0 ? (
              <div className="space-y-3">
                {codes.map((c) => (
                  <div key={c.code} className="p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border hover:shadow-md transition-all">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <code className="text-lg font-bold text-blue-600">{c.code}</code>
                          <Badge variant={c.type === 'otp' ? 'default' : 'secondary'}>
                            {c.type === 'otp' ? 'üîÑ OTP' : 'üîí Static'}
                          </Badge>
                          {isExpired(c.expires_at) && (
                            <Badge variant="destructive">H·∫øt h·∫°n</Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-600">
                          H·∫øt h·∫°n: {formatDate(c.expires_at)}
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => onCopyCode(c.code)}
                          className="h-8 w-8 p-0"
                        >
                          <Copy className="w-3 h-3" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button size="sm" variant="destructive" className="h-8 w-8 p-0">
                              <Trash2 className="w-3 h-3" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>X√°c nh·∫≠n x√≥a m√£</AlertDialogTitle>
                              <AlertDialogDescription>
                                B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m√£ <strong>{c.code}</strong>?
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                              <AlertDialogAction 
                                onClick={() => onDeleteCode(c.code)}
                                className="bg-red-600 hover:bg-red-700"
                              >
                                X√≥a
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Key className="w-12 h-12 mx-auto text-gray-300 mb-4" />
                <p className="text-gray-500 text-lg font-medium">Ch∆∞a c√≥ m√£ n√†o</p>
                <p className="text-gray-400 text-sm">T·∫°o m√£ m·ªõi ·ªü ph√≠a tr√™n</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Active NFC Cards */}
        <Card className="shadow-xl border-0">
          <CardHeader>
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-3">
                <CreditCard className="w-6 h-6 text-purple-600" />
                <div>
                  <CardTitle className="text-lg">Th·∫ª NFC ƒê√£ ƒêƒÉng K√Ω</CardTitle>
                  <CardDescription>T·ªïng c·ªông: {cards.length} th·∫ª</CardDescription>
                </div>
              </div>
              {cards.length > 0 && (
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button variant="destructive" size="sm">
                      <Trash2 className="w-4 h-4 mr-1" />
                      H·ªßy T·∫•t C·∫£
                    </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>X√°c nh·∫≠n h·ªßy t·∫•t c·∫£ th·∫ª</AlertDialogTitle>
                      <AlertDialogDescription>
                        B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒëƒÉng k√Ω t·∫•t c·∫£ {cards.length} th·∫ª NFC? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                      <AlertDialogAction onClick={onDeleteAllCards} className="bg-red-600 hover:bg-red-700">
                        H·ªßy T·∫•t C·∫£
                      </AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              )}
            </div>
          </CardHeader>
          <CardContent>
            {cards.length > 0 ? (
              <div className="space-y-3">
                {cards.map((c) => (
                  <div key={c.id} className="p-4 bg-gradient-to-r from-gray-50 to-purple-50 rounded-lg border hover:shadow-md transition-all">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <code className="text-lg font-bold text-purple-600 mb-2 block">{c.id}</code>
                        <p className="text-sm text-gray-600">
                          ƒêƒÉng k√Ω: {formatDate(c.enrolled_at)}
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => onCopyCardId(c.id)}
                          className="h-8 w-8 p-0"
                        >
                          <Copy className="w-3 h-3" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button size="sm" variant="destructive" className="h-8 w-8 p-0">
                              <Trash2 className="w-3 h-3" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>X√°c nh·∫≠n h·ªßy th·∫ª</AlertDialogTitle>
                              <AlertDialogDescription>
                                B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒëƒÉng k√Ω th·∫ª <strong>{c.id}</strong>?
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                              <AlertDialogAction 
                                onClick={() => onDisenroll(c.id)}
                                className="bg-red-600 hover:bg-red-700"
                              >
                                H·ªßy ƒêƒÉng K√Ω
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <CreditCard className="w-12 h-12 mx-auto text-gray-300 mb-4" />
                <p className="text-gray-500 text-lg font-medium">Ch∆∞a c√≥ th·∫ª n√†o</p>
                <p className="text-gray-400 text-sm">ƒêƒÉng k√Ω th·∫ª m·ªõi ·ªü ph√≠a tr√™n</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
